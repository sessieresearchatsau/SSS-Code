(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    199141,       4512]
NotebookOptionsPosition[    192815,       4400]
NotebookOutlinePosition[    193498,       4422]
CellTagsIndexPosition[    193392,       4417]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{"SetDirectory", "[", 
  RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Import", "[", "\"\<SSS.m\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.8098751066372213`*^9, 3.8098751854228272`*^9}, {
  3.809875576053508*^9, 3.809875583100951*^9}, {3.8098756301912374`*^9, 
  3.809875650205698*^9}, {3.809875687679804*^9, 3.809875718720586*^9}, {
  3.8098804817225833`*^9, 3.8098804831939263`*^9}, {3.8099477124039974`*^9, 
  3.8099477160946712`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"0b32359b-b166-460c-89b9-1a958b7c8c65"],

Cell[BoxData["\<\"C:\\\\Users\\\\caviness\\\\Documents\\\\Git\\\\SSS-Code\\\\\
temp\"\>"], "Output",
 CellChangeTimes->{{3.8098757100376477`*^9, 3.8098757216942487`*^9}, 
   3.8098818785992293`*^9, {3.8098819435175943`*^9, 3.8098819534847035`*^9}, 
   3.8098820661296663`*^9, 3.8099475274765286`*^9, 3.8099477518022747`*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"01e846a1-2fc9-4ca6-922d-70c3aa76bb84"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SSS`*"}]], "Input",
 CellChangeTimes->{{3.809948349242219*^9, 3.809948353188152*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"e01a66db-3be5-4229-adf1-2f780fe823e4"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Functions related to Sequential Substitution \
Systems (SSS) & Causal Network Construction.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "FullName", "Tooltip"]& ], "\<\"SSS`SSS\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Functions related to Sequential Substitution \
Systems (SSS) & Causal Network Construction.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "Functions related to Sequential Substitution Systems (SSS) & Causal \
Network Construction.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> None, "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> "SSS`SSS"], 
   False]]], "Output",
 CellChangeTimes->{3.809948354109687*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"c4a5f59c-40d4-497d-87df-b701acaa00e8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["$Packages"], "Input",
 CellChangeTimes->{{3.809948326444285*^9, 3.8099483292769575`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"3dfa2f96-4278-4dc9-905b-cb7d225e2a48"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"QuantityUnits`\"\>", ",", "\<\"UUID`\"\>", 
   ",", "\<\"CreateUUID`\"\>", ",", "\<\"SSS`\"\>", 
   ",", "\<\"EntityFramework`WolframAlphaEntityStore`\"\>", 
   ",", "\<\"EntityFramework`Utilities`\"\>", 
   ",", "\<\"EntityFramework`ToFromEntity`\"\>", 
   ",", "\<\"EntityFramework`Registry`\"\>", 
   ",", "\<\"EntityFramework`Prefetch`\"\>", 
   ",", "\<\"EntityFramework`Predicates`\"\>", 
   ",", "\<\"EntityFramework`OperatorForms`\"\>", 
   ",", "\<\"EntityFramework`InterpreterCache`\"\>", 
   ",", "\<\"EntityFramework`GeneralEntity`\"\>", 
   ",", "\<\"EntityFramework`Formatting`\"\>", 
   ",", "\<\"EntityFramework`EntityStore`\"\>", 
   ",", "\<\"EntityFramework`EntityList`\"\>", 
   ",", "\<\"EntityFramework`EntityFunctions`\"\>", 
   ",", "\<\"EntityFramework`DefaultEntityTypes`\"\>", 
   ",", "\<\"EntityFramework`DataUtilities`\"\>", 
   ",", "\<\"EntityFramework`DataFunctions`\"\>", 
   ",", "\<\"EntityFramework`CustomEntity`\"\>", 
   ",", "\<\"EntityFramework`Caching`\"\>", 
   ",", "\<\"EntityFramework`BatchApplied`\"\>", 
   ",", "\<\"EntityFramework`\"\>", ",", "\<\"DocumentationSearch`\"\>", 
   ",", "\<\"Macros`\"\>", ",", "\<\"DocumentationSearch`Skeletonizer`\"\>", 
   ",", "\<\"JLink`\"\>", ",", "\<\"GetFEKernelInit`\"\>", 
   ",", "\<\"URLUtilities`\"\>", ",", "\<\"JSONTools`\"\>", 
   ",", "\<\"CURLLink`URLResponseTime`\"\>", 
   ",", "\<\"CURLLink`Utilities`\"\>", ",", "\<\"CURLInfo`\"\>", 
   ",", "\<\"CURLLink`Cookies`\"\>", ",", "\<\"CURLLink`HTTP`\"\>", 
   ",", "\<\"OAuthSigning`\"\>", ",", "\<\"CURLLink`URLFetch`\"\>", 
   ",", "\<\"CURLLink`\"\>", ",", "\<\"KeychainLink`\"\>", 
   ",", "\<\"NaturalLanguage`\"\>", ",", "\<\"ResourceFunctionHelpers`\"\>", 
   ",", "\<\"CloudDialogs`\"\>", ",", "\<\"Cryptography`\"\>", 
   ",", "\<\"CloudObject`CreateUUID`\"\>", ",", "\<\"CloudObjectLoader`\"\>", 
   ",", "\<\"NeuralNetworks`\"\>", ",", "\<\"EntityFrameworkLoader`\"\>", 
   ",", "\<\"WebAudioSearchLoader`\"\>", ",", "\<\"Templating`\"\>", 
   ",", "\<\"NeuralFunctions`\"\>", ",", "\<\"MobileMessaging`\"\>", 
   ",", "\<\"Interpreter`\"\>", ",", "\<\"IntegratedServices`\"\>", 
   ",", "\<\"IconizeLoader`\"\>", ",", "\<\"HTTPHandling`\"\>", 
   ",", "\<\"Forms`\"\>", ",", "\<\"ExternalEvaluate`\"\>", 
   ",", "\<\"Blockchain`\"\>", ",", "\<\"Authentication`\"\>", 
   ",", "\<\"SystemTools`\"\>", ",", "\<\"SecureShellLink`\"\>", 
   ",", "\<\"MailLink`\"\>", ",", "\<\"IMAPLink`\"\>", 
   ",", "\<\"ExternalStorage`\"\>", ",", "\<\"UnitTable`\"\>", 
   ",", "\<\"AlphaScannerFunctions`\"\>", ",", "\<\"ResourceLocator`\"\>", 
   ",", "\<\"PacletManager`\"\>", ",", "\<\"PersistenceLocations`\"\>", 
   ",", "\<\"System`\"\>", ",", "\<\"Global`\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.809948330094772*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"74537c3e-80ad-4a3a-b1aa-1bd4c2f280d3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Needs"}]], "Input",
 CellChangeTimes->{{3.809948237899021*^9, 3.8099482397885103`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"cffec599-af58-41e0-9572-087a717b0292"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox[
           PaneBox[
            TooltipBox[
             ButtonBox[
              PaneSelectorBox[{False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIcon"],
                ImageSizeCache->{13., {4., 9.}}], True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIconHot"],
                ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
                CurrentValue["MouseOver"]]],
              Appearance->None,
              BaseStyle->"Link",
              ButtonData->"paclet:ref/Needs",
              ButtonNote->"paclet:ref/Needs"],
             "\"paclet:ref/Needs\""],
            FrameMargins->{{0, 4}, {0, 2}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"Needs\\\", \\\"[\\\", \
StyleBox[\\\"\\\\\\\"\\\\!\\\\(\\\\*StyleBox[\\\\\\\"context\\\\\\\",\\\\\\\"\
TI\\\\\\\"]\\\\)`\\\\\\\"\\\", ShowStringCharacters->True], \\\"]\\\"}]\\) \
loads an appropriate file if the specified context is not already in \
$Packages. \\n\\!\\(\\*RowBox[{\\\"Needs\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"\\\\\\\"\\\\!\\\\(\\\\*StyleBox[\\\\\\\"context\\\\\\\",\
\\\\\\\"TI\\\\\\\"]\\\\)`\\\\\\\"\\\", ShowStringCharacters->True], \
\\\",\\\", StyleBox[\\\"\\\\\\\"\\\\!\\\\(\\\\*StyleBox[\\\\\\\"file\\\\\\\",\
\\\\\\\"TI\\\\\\\"]\\\\)\\\\\\\"\\\", ShowStringCharacters->True]}], \
\\\"]\\\"}]\\) loads \\!\\(\\*StyleBox[\\\"file\\\", \\\"TI\\\"]\\) if the \
specified context is not already in $Packages. \"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Documentation\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Documentation\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Documentation", "Tooltip"]& ], 
                   TemplateBox[{
                    
                    TemplateBox[{
                    "\"Local \[RightGuillemet]\"", "paclet:ref/Needs", 
                    "paclet:ref/Needs", "Link", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"], "\"  \"", 
                    StyleBox[
                    "\"|\"", "InformationRowLabel", StripOnInput -> False], 
                    "\"  \"", 
                    TemplateBox[{"\"Web \[RightGuillemet]\"", {
                    URL[
                    "http://reference.wolfram.com/language/ref/Needs.html"], 
                    None}, "http://reference.wolfram.com/language/ref/Needs.\
html", "Hyperlink", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"]},
                    "RowDefault"]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"System`Needs\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox[
           PaneBox[
            TooltipBox[
             ButtonBox[
              PaneSelectorBox[{False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIcon"],
                ImageSizeCache->{13., {4., 9.}}], True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIconHot"],
                ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
                CurrentValue["MouseOver"]]],
              Appearance->None,
              BaseStyle->"Link",
              ButtonData->"paclet:ref/Needs",
              ButtonNote->"paclet:ref/Needs"],
             "\"paclet:ref/Needs\""],
            FrameMargins->{{0, 4}, {0, 2}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"Needs\\\", \\\"[\\\", \
StyleBox[\\\"\\\\\\\"\\\\!\\\\(\\\\*StyleBox[\\\\\\\"context\\\\\\\",\\\\\\\"\
TI\\\\\\\"]\\\\)`\\\\\\\"\\\", ShowStringCharacters->True], \\\"]\\\"}]\\) \
loads an appropriate file if the specified context is not already in \
$Packages. \\n\\!\\(\\*RowBox[{\\\"Needs\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"\\\\\\\"\\\\!\\\\(\\\\*StyleBox[\\\\\\\"context\\\\\\\",\
\\\\\\\"TI\\\\\\\"]\\\\)`\\\\\\\"\\\", ShowStringCharacters->True], \
\\\",\\\", StyleBox[\\\"\\\\\\\"\\\\!\\\\(\\\\*StyleBox[\\\\\\\"file\\\\\\\",\
\\\\\\\"TI\\\\\\\"]\\\\)\\\\\\\"\\\", ShowStringCharacters->True]}], \
\\\"]\\\"}]\\) loads \\!\\(\\*StyleBox[\\\"file\\\", \\\"TI\\\"]\\) if the \
specified context is not already in $Packages. \"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"Needs\", \"[\", \
StyleBox[\"\\\"\\!\\(\\*StyleBox[\\\"context\\\",\\\"TI\\\"]\\)`\\\"\", \
ShowStringCharacters->True], \"]\"}]\) loads an appropriate file if the \
specified context is not already in $Packages. \n\!\(\*RowBox[{\"Needs\", \"[\
\", RowBox[{StyleBox[\"\\\"\\!\\(\\*StyleBox[\\\"context\\\",\\\"TI\\\"]\\)`\\\
\"\", ShowStringCharacters->True], \",\", StyleBox[\"\\\"\\!\\(\\*StyleBox[\\\
\"file\\\",\\\"TI\\\"]\\)\\\"\", ShowStringCharacters->True]}], \"]\"}]\) \
loads \!\(\*StyleBox[\"file\", \"TI\"]\) if the specified context is not \
already in $Packages. ", "Documentation" -> 
    Association[
     "Local" -> "paclet:ref/Needs", "Web" -> 
      "http://reference.wolfram.com/language/ref/Needs.html"], "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> None, "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "System`Needs"], False]]], "Output",
 CellChangeTimes->{3.8099482406742067`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"0c3a9177-349b-4ad8-82e5-013fded44212"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "needs", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", 
        "Entity[\"Word\", \"needs\"]"}, "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Entity[\"Word\", \"needs\"]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               TemplateBox[{
                 TagBox[
                  TagBox["\"needs\"", 
                   $CellContext`TagBoxWrapper[
                   "Entity" -> {WordData, "needs"}]], Identity], "\"  \"", 
                 StyleBox[
                  
                  RowBox[{
                   "\"(\"", "\[NoBreak]", "\"English word\"", "\[NoBreak]", 
                    "\")\""}], {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, "RowDefault"], LineIndent -> 0], TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Definition", "scanner" -> "Data", "id" -> 
     "Definition:WordData", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"WordData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Word\", \"needs\"][EntityProperty[\"Word\", \
\"Definitions\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                   PaneBox[
                    StyleBox[
                    "\"adverb\"", {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                   $CellContext`TagBoxWrapper["Label"]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"in such a manner as could not be otherwise\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}}, GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{{Top}, {Bottom}}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {
                "Columns" -> None, "Rows" -> {{True}}, 
                 "ItemsIndexed" -> {{{1, -1}, {1, -1}} -> None}}, 
               GridBoxItemSize -> {"Columns" -> {Automatic, Automatic}}, 
               GridBoxSpacings -> {"Columns" -> {0, 0.8, 0}, "Rows" -> {{1}}},
                FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Pronunciation", "scanner" -> "Data", "id" -> 
     "Pronunciation:WordData", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"WordData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Word\", \"needs\"][EntityProperty[\"Word\", \"Pronunciation\
\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               StyleBox[
               "\"n'eedz\"", {
                LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                 0}], "\"  \"", 
               StyleBox[
                RowBox[{"\"(\"", "\[NoBreak]", 
                  TemplateBox[{
                    StyleBox[
                    "\"IPA\"", {FontFamily -> "Helvetica", FontSize -> 9, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\": \"", "\"n\:02c8idz\""}, "RowDefault"], 
                  "\[NoBreak]", "\")\""}], {
                FontFamily -> "Verdana", FontSize -> 10, 
                 GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}, "RowDefault"], LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Hyphenation", "scanner" -> "Data", "id" -> 
     "Hyphenation:WordData", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"WordData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Word\", \"needs\"][EntityProperty[\"Word\", \
\"Hyphenation\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"  ", "\"  \"", 
              TemplateBox[{"\"needs\""}, "RowDefault"], 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"no hyphenation\"", "\[NoBreak]", 
                 "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              StyleBox[
               RowBox[{"\"(\"", "\[NoBreak]", 
                 TemplateBox[{
                   StyleBox[
                    RowBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["5", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"letters\"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    StyleBox[
                    StyleBox[
                    "\"  | \"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    GrayLevel[0.6], StripOnInput -> False]}], AutoSpacing -> 
                    True], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"syllable\"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}], 
                    LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                    0]}, "RowDefault"], "\[NoBreak]", "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowWithSeparators"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "First known use in English", "scanner" -> "Data", "id" -> 
     "FirstRecordYear:WordData", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"HistoricalPeriodData"}], "\n    ", 
         XMLElement["microsource", {}, {"WordData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"TheWikimediaFoundationIncWikipedia"}],
          "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"  ", "\"  \"", 
              FormBox[
               TagBox["\"1374\"", Identity], TraditionalForm], 
              StyleBox[
               RowBox[{"\"(\"", "\[NoBreak]", 
                 TagBox[
                  TagBox["\"Late Middle ages\"", 
                   $CellContext`TagBoxWrapper[
                   "Entity" -> {HistoricalPeriodData, "LateMiddleAges"}]], 
                  Identity], "\[NoBreak]", "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              StyleBox[
               RowBox[{"\"(\"", "\[NoBreak]", 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["646", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"years\"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" ago\""}, "RowDefault"], 
                 "\[NoBreak]", "\")\""}], {
               FontFamily -> "Verdana", FontSize -> 10, 
                GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowWithSeparators"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {
    "title" -> "Word origin", "scanner" -> "Data", "id" -> 
     "LanguageOrigin:WordData", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"WordData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Word\", \"needs\"][EntityProperty[\"Word\", \
\"LanguageOrigin\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              TagBox["\"Old English\"", 
               $CellContext`TagBoxWrapper[
               "Entity" -> {LanguageData, "OldEnglish"}]], Identity], 
             TraditionalForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Overall typical frequency", "scanner" -> "Data", "id" -> 
     "Frequency:WordData", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"WordData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox["\"written: \"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              TagBox[
               SuperscriptBox["906", "\"th\""], 
               $CellContext`TagBoxWrapper[
               "StringBoxes" -> RowBox[{"906", "\"th\""}]]], 
              "\" most common\""}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"WordData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox["\"spoken: \"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              TagBox[
               SuperscriptBox["687", "\"th\""], 
               $CellContext`TagBoxWrapper[
               "StringBoxes" -> RowBox[{"687", "\"th\""}]]], 
              "\" most common\""}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            PaneBox[
             TagBox[
              Cell[
               TextData[{
                 StyleBox[
                  Cell[
                   BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"includes some inflected forms\"", "\[NoBreak]", 
                    "\")\""}], TraditionalForm]]], {
                  FontFamily -> "Verdana", FontSize -> 10, 
                   GrayLevel[0.5], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}]], 
              $CellContext`TagBoxWrapper["Label"]], 
             BaseStyle -> {LineIndent -> 0}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Word frequency history", "scanner" -> "Data", "id" -> 
     "BookMatchFrequency:WordData", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "0", "async" -> 
     "https://www5a.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa5500219659b8iaf9ige300005105h6ah3c0ig9g690747545159716970", "asyncfailed" -> 
     "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "TimeSeriesPlot"}, {}], 
       "\n  "}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Synonyms", "scanner" -> "Data", "id" -> 
     "Synonyms:WordData", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"WordData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Word\", \"needs\"][EntityProperty[\"Word\", \
\"SynonymsList\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               FormBox[
                TagBox[
                 TagBox["\"inevitably\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WordData, "inevitably"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"necessarily\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WordData, "necessarily"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"of necessity\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WordData, "of necessity"}]], Identity], 
                TraditionalForm]}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show synonym network", "input" -> 
         "Synonyms:WordData__Show synonym network"}, {}]}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Rhymes", "scanner" -> "Data", "id" -> "Rhyme:WordData",
      "position" -> "1000", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n   ", 
         XMLElement["microsource", {}, {"WordData"}], "\n  "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 RowBox[{
                   RowBox[{
                    FormBox[
                    TagBox[
                    TagBox["\"accedes\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "accedes"}]], Identity], 
                    TraditionalForm], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    FormBox[
                    TagBox[
                    TagBox["\"beads\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "beads"}]], Identity], 
                    TraditionalForm], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    FormBox[
                    TagBox[
                    TagBox["\"bleeds\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "bleeds"}]], Identity], 
                    TraditionalForm], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    FormBox[
                    TagBox[
                    TagBox["\"breeds\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "breeds"}]], Identity], 
                    TraditionalForm], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    FormBox[
                    TagBox[
                    TagBox["\"cedes\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "cedes"}]], Identity], 
                    TraditionalForm], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    FormBox[
                    TagBox[
                    TagBox["\"concedes\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "concedes"}]], Identity], 
                    TraditionalForm], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    FormBox[
                    TagBox[
                    TagBox["\"creeds\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "creeds"}]], Identity], 
                    TraditionalForm], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    FormBox[
                    TagBox[
                    TagBox["\"deeds\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "deeds"}]], Identity], 
                    TraditionalForm], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    FormBox[
                    TagBox[
                    TagBox["\"exceeds\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "exceeds"}]], Identity], 
                    TraditionalForm], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    FormBox[
                    TagBox[
                    TagBox["\"feeds\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "feeds"}]], Identity], 
                    TraditionalForm], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    FormBox[
                    TagBox[
                    TagBox["\"heeds\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "heeds"}]], Identity], 
                    TraditionalForm], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    FormBox[
                    TagBox[
                    TagBox["\"impedes\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "impedes"}]], Identity], 
                    TraditionalForm], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    FormBox[
                    TagBox[
                    TagBox["\"leads\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "leads"}]], Identity], 
                    TraditionalForm], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    FormBox[
                    TagBox[
                    TagBox["\"meads\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "meads"}]], Identity], 
                    TraditionalForm], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    FormBox[
                    TagBox[
                    TagBox["\"misdeeds\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "misdeeds"}]], Identity], 
                    TraditionalForm], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    "\"\[Ellipsis]\""}], "   ", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{" ", "\"total:\"", "28"}, 
                    "RowWithSeparator"], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], LinebreakAdjustments -> {1, 10, 0, 0, 100}, 
                 LineIndent -> 0]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"based on typical American pronunciation\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "statelist", {
        "count" -> "4", "value" -> "Sorted alphabetically", "delimiters" -> 
         ""}, {
         XMLElement[
         "state", {
          "name" -> "Sorted alphabetically", "input" -> 
           "Rhyme:WordData__Sorted alphabetically"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Sorted by length", "input" -> 
           "Rhyme:WordData__Sorted by length"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Sorted by syllables", "input" -> 
           "Rhyme:WordData__Sorted by syllables"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Sorted by frequency", "input" -> 
           "Rhyme:WordData__Sorted by frequency"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "More", "input" -> "Rhyme:WordData__More"}, {}]}]}], 
   Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Lexically close words", "scanner" -> "Data", "id" -> 
     "LexicallyCloseWords:WordData", "position" -> "1100", "error" -> "false",
      "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n   ", 
         XMLElement["microsource", {}, {"WordData"}], "\n  "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               RowBox[{
                 FormBox[
                  TagBox[
                   TagBox["\"deeds\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "deeds"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"feeds\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "feeds"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"heeds\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "heeds"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"Leeds\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "Leeds"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"needy\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "needy"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"reeds\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "reeds"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"seeds\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "seeds"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"weeds\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "weeds"}]], Identity], 
                  TraditionalForm]}], "   ", 
               StyleBox[
                RowBox[{"\"(\"", "\[NoBreak]", 
                  TemplateBox[{" ", "\"total:\"", "8"}, "RowWithSeparator"], 
                  "\[NoBreak]", "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "statelist", {
        "count" -> "2", "value" -> "1-letter difference", "delimiters" -> 
         ""}, {
         XMLElement[
         "state", {
          "name" -> "1-letter difference", "input" -> 
           "LexicallyCloseWords:WordData__1-letter difference"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Up to 2-letter difference", "input" -> 
           "LexicallyCloseWords:WordData__Up to 2-letter difference"}, \
{}]}]}]}], Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> "Anagrams", "scanner" -> "Data", "id" -> 
     "Anagram:WordData", "position" -> "1200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"WordData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"none among common words\"", 
                 "\[NoBreak]", "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              $CellContext`TagBoxWrapper[
              "Missing" -> "WordDataNotAvailable"]], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod13$$ = XMLElement[
   "pod", {"title" -> "Translations", "scanner" -> "Data", "id" -> 
     "ManyTranslations:TranslationData", "position" -> "1300", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CountryData"}], "\n    ", 
         XMLElement["microsource", {}, {"LanguageData"}], "\n    ", 
         XMLElement["microsource", {}, {"TranslationData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"Ethnologue"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TemplateBox[{
                   FormBox[
                    TagBox[
                    TagBox["\"Spanish\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {LanguageData, "Spanish"}]], Identity], 
                    TraditionalForm], "\": \""}, "RowDefault"], 
                 GrayLevel[0.3], StripOnInput -> False], 
                StyleBox[
                 RowBox[{
                   StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"necesariamente\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    "TranslationData", {"Spanish", "necesariamente"}}]], 
                    Identity], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"general\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                   StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                   StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"forzosamente\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    "TranslationData", {"Spanish", "forzosamente"}}]], 
                    Identity], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"general\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}], 
                 LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                 0]}, {
                StyleBox[
                 TemplateBox[{
                   FormBox[
                    TagBox[
                    TagBox["\"French\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {LanguageData, "French"}]], Identity], 
                    TraditionalForm], "\": \""}, "RowDefault"], 
                 GrayLevel[0.3], StripOnInput -> False], 
                StyleBox[
                 RowBox[{
                   StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"absolument\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    "TranslationData", {"French", "absolument"}}]], Identity],
                     "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"general\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                   StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                   StyleBox[
                    
                    TemplateBox[{
                    "\"de toute n\[EAcute]cessit\[EAcute]\"", "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"general\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}], 
                 LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                 0]}, {
                StyleBox[
                 TemplateBox[{
                   FormBox[
                    TagBox[
                    TagBox["\"Portuguese\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {LanguageData, "Portuguese"}]], Identity], 
                    TraditionalForm], "\": \""}, "RowDefault"], 
                 GrayLevel[0.3], StripOnInput -> False], 
                StyleBox[
                 RowBox[{
                   StyleBox[
                    TemplateBox[{"\"por for\[CCedilla]a\"", "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"general\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                   StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                   StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"for\[CCedilla]osamente\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    "TranslationData", {
                    "Portuguese", "for\[CCedilla]osamente"}}]], Identity], 
                    "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"general\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                   StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                   StyleBox[
                    TemplateBox[{"\"por necessidade\"", "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"general\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}], 
                 LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                 0]}, {
                StyleBox[
                 TemplateBox[{
                   FormBox[
                    TagBox[
                    TagBox["\"German\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {LanguageData, "German"}]], Identity], 
                    TraditionalForm], "\": \""}, "RowDefault"], 
                 GrayLevel[0.3], StripOnInput -> False], 
                StyleBox[
                 RowBox[{
                   StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"notwendigerweise\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    "TranslationData", {"German", "notwendigerweise"}}]], 
                    Identity], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"general\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                   StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                   StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"unbedingt\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    "TranslationData", {"German", "unbedingt"}}]], Identity], 
                    "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"general\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}], 
                 LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                 0]}, {
                StyleBox[
                 TemplateBox[{
                   FormBox[
                    TagBox[
                    TagBox["\"Italian\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {LanguageData, "Italian"}]], Identity], 
                    TraditionalForm], "\": \""}, "RowDefault"], 
                 GrayLevel[0.3], StripOnInput -> False], 
                StyleBox[
                 RowBox[{
                   StyleBox[
                    TemplateBox[{"\"per forza\"", "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"general\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                   StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                   StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"necessariamente\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    "TranslationData", {"Italian", "necessariamente"}}]], 
                    Identity], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"general\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}], 
                 LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                 0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AutoDelete -> False, 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              FrameStyle -> GrayLevel[0.92]], "Grid"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "ManyTranslations:TranslationData__More"}, {}]}]}], Typeset`pod14$$ =
    XMLElement[
   "pod", {"title" -> "Other notable uses", "scanner" -> "Data", "id" -> 
     "Entities:WordData", "position" -> "1400", "error" -> "false", 
     "numsubpods" -> "0", "async" -> 
     "https://www5a.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa5503219659b8iaf9ige30000662f4hc0507e7c3590747545159716970", "asyncfailed" -> 
     "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "15"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod15$$ = XMLElement[
   "pod", {"title" -> "Crossword puzzle clues", "scanner" -> "Data", "id" -> 
     "NYTCrosswordPuzzleClues:WordData", "position" -> "1500", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n   ", 
         XMLElement["microsource", {}, {"WordData"}], "\n  "}], 
       XMLElement["datasources", {}, {"\n   ", 
         XMLElement["datasource", {}, {"XWordInfo"}], "\n  "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Word\", \"needs\"][EntityProperty[\"Word\", \
\"NYTCrosswordPuzzleClues\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 RowBox[{
                   RowBox[{
                    StyleBox[
                    "\"Base negotiating amounts\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    "\"Basic ___\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    "\"Calls for\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    "\"Can't do without\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    "\"Cries out for\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    "\"Demands\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    "\"Desiderata\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    "\"Essentials\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    "\"Exigencies\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    "\"Food and shelter\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    "\"Food and shelter, e.g.\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    "\"Food and water\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    "\"Food and water, for two\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    "\"Has got to have\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    "\"\[Ellipsis]\""}], "   ", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{" ", "\"total:\"", "35"}, 
                    "RowWithSeparator"], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], LinebreakAdjustments -> {1, 10, 0, 0, 100}, 
                 LineIndent -> 0]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"based on all New York Times crossword puzzles 1994 to \
2009\"", "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Less", "input" -> 
         "NYTCrosswordPuzzleClues:WordData__Less"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "NYTCrosswordPuzzleClues:WordData__More"}, {}]}]}], Typeset`pod16$$ =
    XMLElement[
   "pod", {"title" -> "Scrabble score", "scanner" -> "Data", "id" -> 
     "ScrabbleScore:WordData", "position" -> "1600", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n   ", 
         XMLElement["microsource", {}, {"WordData"}], "\n  "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                TemplateBox[{
                  StyleBox[
                   TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["6", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "6", "SRString" -> "6"]]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                   LineIndent -> 0, ZeroWidthTimes -> False], "\"  \"", 
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"International English\"", 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  StyleBox[
                   TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["6", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "6", "SRString" -> "6"]]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                   LineIndent -> 0, ZeroWidthTimes -> False], "\"  \"", 
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"North American English\"", 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod17$$ = XMLElement[
   "pod", {"title" -> "Phone keypad digits", "scanner" -> "Data", "id" -> 
     "TelephoneNumber:WordData", "position" -> "1700", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"WordData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox[
               RowBox[{"\"(\"", "\[NoBreak]", 
                 TemplateBox[{
                   TagBox[
                    StyleBox[
                    "\"\[FilledSmallCircle]\"", FontColor -> GrayLevel[0.85], 
                    StripOnInput -> False], 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "?"]], 
                   TagBox[
                    StyleBox[
                    "\"\[FilledSmallCircle]\"", FontColor -> GrayLevel[0.85], 
                    StripOnInput -> False], 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "?"]], 
                   TagBox[
                    StyleBox[
                    "\"\[FilledSmallCircle]\"", FontColor -> GrayLevel[0.85], 
                    StripOnInput -> False], 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "?"]]}, 
                  "RowDefault"], "\[NoBreak]", "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], "\"  \"", 
              TagBox[
               StyleBox[
               "\"\[FilledSmallCircle]\"", FontColor -> GrayLevel[0.85], 
                StripOnInput -> False], 
               $CellContext`TagBoxWrapper["StringBoxes" -> "?"]], 
              TagBox[
               StyleBox[
               "\"\[FilledSmallCircle]\"", FontColor -> GrayLevel[0.85], 
                StripOnInput -> False], 
               $CellContext`TagBoxWrapper["StringBoxes" -> "?"]], "\"6\"", 
              StyleBox["\"-\"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], "\"3\"", "\"3\"", "\"3\"", "\"7\""}, 
             "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["sources", {"count" -> "19"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
AdministrativeDivisionDataSourceInformationNotes.html", "text" -> 
        "Administrative division data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
BookDataSourceInformationNotes.html", "text" -> "Book data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
BridgeDataSourceInformationNotes.html", "text" -> "Bridge data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
BuildingDataSourceInformationNotes.html", "text" -> "Building data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
CityDataSourceInformationNotes.html", "text" -> "City data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
CompanyDataSourceInformationNotes.html", "text" -> "Company data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
CountryDataSourceInformationNotes.html", "text" -> "Country data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
GivenNameDataSourceInformationNotes.html", "text" -> "Given name data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
HistoricalPeriodDataSourceInformationNotes.html", "text" -> 
        "Historical period data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
InternetDataSourceInformationNotes.html", "text" -> "Internet data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
LakeDataSourceInformationNotes.html", "text" -> "Lake data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
LanguageDataSourceInformationNotes.html", "text" -> "Language data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
MountainDataSourceInformationNotes.html", "text" -> "Mountain data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
MovieDataSourceInformationNotes.html", "text" -> "Movie data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
OceanDataSourceInformationNotes.html", "text" -> "Ocean data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
RiverDataSourceInformationNotes.html", "text" -> "River data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
SurnameDataSourceInformationNotes.html", "text" -> "Surname data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
TranslationDataSourceInformationNotes.html", "text" -> 
        "Translation data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
WordDataSourceInformationNotes.html", "text" -> "Word data"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "17", "datatypes" -> 
    "AdministrativeDivision,Book,Bridge,Building,City,Company,Country,\
GivenName,HistoricalPeriod,Internet,Lake,Language,Mountain,Movie,Ocean,River,\
Surname,Translation,Word", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
    "3.62", "parsetiming" -> "0.598", "parsetimedout" -> "false", 
    "recalculate" -> "", "id" -> 
    "MSP5498219659b8iaf9ige300005e122c001c70e4b3", "host" -> 
    "https://www5a.wolframalpha.com", "server" -> "20", "related" -> 
    "https://www5a.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa5499219659b8iaf9ige300001212024be89f63ib90747545159716970", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -4., 
    "Date" -> {2020, 9, 24, 10, 58, 4.4017113`8.39619653283959}, "Line" -> 16,
     "SessionID" -> 23993381596312038722}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, Typeset`failedpods$$ = {8, 
   14}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", "Entity[\"Word\", \"needs\"]"}, 
   Typeset`open$$ = True, Typeset`newq$$ = "needs"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{560., {1612., 18.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",ExpressionUUID->\
"5b816c7d-97ac-4390-a82b-08539a24b522"],

Cell[BoxData[
 TemplateBox[{"\"needs\"", 
   RowBox[{"Entity", "[", 
     RowBox[{"\"Word\"", ",", "\"needs\""}], "]"}], 
   "\"Entity[\\\"Word\\\", \\\"needs\\\"]\"", "\"word\""},
  "Entity"]], "Output",
 CellChangeTimes->{3.809948276760236*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"0a0ec30f-6fd6-4384-b011-6653218f2ba4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "*Dir*"}]], "Input",
 CellChangeTimes->{{3.809947766228327*^9, 3.8099477800627193`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"35e626b6-b605-4888-8ab7-85887cd6b56c"],

Cell[BoxData[
 StyleBox[
  FrameBox[GridBox[{
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["System`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], " ", 
              StyleBox["System`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 StyleBox["AnimationDirection", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "AnimationDirection", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Directive", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "Directive", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["DirichletWindow", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DirichletWindow", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SetCloudDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "SetCloudDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["$InitialDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "$InitialDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["CloudDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "CloudDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Directory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "Directory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["GeoDirection", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "GeoDirection", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SetDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "SetDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["$InstallationDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "$InstallationDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["CopyDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "CopyDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["DirectoryName", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DirectoryName", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["GeoGridDirectionDifference", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "GeoGridDirectionDifference", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TableDirections", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "TableDirections", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["$LaunchDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "$LaunchDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["CreateDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "CreateDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["DirectoryQ", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DirectoryQ", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HomeDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "HomeDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TimeDirection", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "TimeDirection", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["$PreferencesDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "$PreferencesDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 
                 StyleBox["CreateIntermediateDirectories", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "CreateIntermediateDirectories", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["DirectoryStack", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DirectoryStack", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["IncludeDirectories", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "IncludeDirectories", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TransitionDirection", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "TransitionDirection", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["$RootDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "$RootDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DeleteDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DeleteDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["DirichletBeta", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DirichletBeta", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NotebookDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "NotebookDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TravelDirections", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "TravelDirections", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["$TemporaryDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "$TemporaryDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DiracComb", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DiracComb", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["DirichletCharacter", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DirichletCharacter", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["PacletDirectoryAdd", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "PacletDirectoryAdd", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TravelDirectionsData", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "TravelDirectionsData", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["$TopDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "$TopDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DiracDelta", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DiracDelta", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["DirichletCondition", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DirichletCondition", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["PacletDirectoryLoad", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "PacletDirectoryLoad", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["WindDirectionData", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "WindDirectionData", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["$UserAddOnsDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "$UserAddOnsDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DirectedEdge", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DirectedEdge", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["DirichletConvolve", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DirichletConvolve", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["PacletDirectoryRemove", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "PacletDirectoryRemove", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["$AddOnsDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "$AddOnsDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["$UserBaseDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "$UserBaseDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DirectedEdges", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DirectedEdges", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["DirichletDistribution", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DirichletDistribution", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["PacletDirectoryUnload", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "PacletDirectoryUnload", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["$BaseDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "$BaseDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["$UserBasePacletsDirectory", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "$UserBasePacletsDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DirectedGraph", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DirectedGraph", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["DirichletEta", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DirichletEta", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["ParentDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "ParentDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["$BasePacletsDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "$BasePacletsDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["$UserDocumentsDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "$UserDocumentsDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DirectedGraphQ", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DirectedGraphQ", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["DirichletL", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DirichletL", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["ProcessDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "ProcessDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["$CacheBaseDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "$CacheBaseDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["$WolframDocumentsDirectory", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "$WolframDocumentsDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DirectedInfinity", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DirectedInfinity", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["DirichletLambda", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DirichletLambda", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RenameDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "RenameDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["$CloudRootDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "$CloudRootDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["Direction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "Direction", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["DirichletTransform", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DirichletTransform", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["ResetDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "ResetDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["$HomeDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "$HomeDirectory", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], ""}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.19]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]},
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["DocumentationSearch`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], " ", 
              StyleBox["DocumentationSearch`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 
                 StyleBox["AddDocumentationDirectory", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "AddDocumentationDirectory", "DocumentationSearch`"}, 
                   False},
                 ButtonNote->"DocumentationSearch`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["DirectHitSearch", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "DirectHitSearch", "DocumentationSearch`"}, False},
                 ButtonNote->"DocumentationSearch`",
                 Evaluator->Automatic]}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.475]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]},
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["ResourceLocator`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], " ", 
              StyleBox["ResourceLocator`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 StyleBox["ApplicationDataDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "ApplicationDataDirectory", "ResourceLocator`"}, False},
                 ButtonNote->"ResourceLocator`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["ApplicationDataUserDirectory", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "ApplicationDataUserDirectory", "ResourceLocator`"}, False},
                 ButtonNote->"ResourceLocator`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["ApplicationDirectoriesLocate", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "ApplicationDirectoriesLocate", "ResourceLocator`"}, False},
                 ButtonNote->"ResourceLocator`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["ApplicationDirectoryAdd", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "ApplicationDirectoryAdd", "ResourceLocator`"}, False},
                 ButtonNote->"ResourceLocator`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["CreateDataDirectory", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", {
                   "CreateDataDirectory", "ResourceLocator`"}, False},
                 ButtonNote->"ResourceLocator`",
                 Evaluator->Automatic]}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.19]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{
     "ColumnsIndexed" -> {{False}}, 
      "RowsIndexed" -> {2 -> GrayLevel[0.85], 3 -> GrayLevel[0.85]}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.8]}, 
        Offset[0.2]}}],
   BaseStyle->"InformationTitleFrame"], "InformationGridPlain"]], "Output",
 CellChangeTimes->{3.8099477809925184`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"2ebe2b7d-9b2f-45b7-96e4-8fcb38ad5dfb"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox[
           PaneBox[
            TooltipBox[
             ButtonBox[
              PaneSelectorBox[{False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIcon"]], True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIconHot"]]}, Dynamic[
                CurrentValue["MouseOver"]]],
              Appearance->None,
              BaseStyle->"Link",
              ButtonData->"paclet:ref/Directory",
              ButtonNote->"paclet:ref/Directory"],
             "\"paclet:ref/Directory\""],
            FrameMargins->{{0, 4}, {0, 2}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"Directory\\\", \\\"[\\\", \
\\\"]\\\"}]\\) gives the current working directory. \"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Documentation\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Documentation\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Documentation", "Tooltip"]& ], 
                   TemplateBox[{
                    
                    TemplateBox[{
                    "\"Local \[RightGuillemet]\"", "paclet:ref/Directory", 
                    "paclet:ref/Directory", "Link", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"], "\"  \"", 
                    StyleBox[
                    "\"|\"", "InformationRowLabel", StripOnInput -> False], 
                    "\"  \"", 
                    TemplateBox[{"\"Web \[RightGuillemet]\"", {
                    URL[
                    "http://reference.wolfram.com/language/ref/Directory.\
html"], None}, "http://reference.wolfram.com/language/ref/Directory.html", 
                    "Hyperlink", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"]},
                    "RowDefault"]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"System`Directory\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox[
           PaneBox[
            TooltipBox[
             ButtonBox[
              PaneSelectorBox[{False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIcon"],
                ImageSizeCache->{13., {4., 9.}}], True->
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIconHot"],
                ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
                CurrentValue["MouseOver"]]],
              Appearance->None,
              BaseStyle->"Link",
              ButtonData->"paclet:ref/Directory",
              ButtonNote->"paclet:ref/Directory"],
             "\"paclet:ref/Directory\""],
            FrameMargins->{{0, 4}, {0, 2}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"Directory\\\", \\\"[\\\", \
\\\"]\\\"}]\\) gives the current working directory. \"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"Directory\", \"[\", \"]\"}]\) gives the current working \
directory. ", "Documentation" -> 
    Association[
     "Local" -> "paclet:ref/Directory", "Web" -> 
      "http://reference.wolfram.com/language/ref/Directory.html"], 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
    "FullName" -> "System`Directory"], False]]], "Print",
 CellTags->
  "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d",ExpressionUUID->"5419e441-7bb4-\
4063-8df6-b5391fb3a55d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Directory", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8099477987310877`*^9, 3.809947807254153*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"40ee29e2-4ea6-4ba8-93bf-518c207f619d"],

Cell[BoxData["\<\"C:\\\\Users\\\\caviness\\\\Documents\\\\Git\\\\SSS-Code\\\\\
temp\"\>"], "Output",
 CellChangeTimes->{3.8099478082424335`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"aea2444f-27c8-4072-b817-3b868416d0a2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<SSS`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.809947822669447*^9, 3.8099478712059717`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"2d1bb351-764a-4e23-bbc2-c2a04d401e44"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SSS`*"}]], "Input",
 CellChangeTimes->{{3.80994787689865*^9, 3.809947889180317*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"1367764a-d29b-418d-9efb-d46a28771a24"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Functions related to Sequential Substitution \
Systems (SSS) & Causal Network Construction.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "FullName", "Tooltip"]& ], "\<\"SSS`SSS\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Functions related to Sequential Substitution \
Systems (SSS) & Causal Network Construction.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "Functions related to Sequential Substitution Systems (SSS) & Causal \
Network Construction.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> None, "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> "SSS`SSS"], 
   False]]], "Output",
 CellChangeTimes->{{3.809947882286543*^9, 3.8099478906695204`*^9}},
 CellLabel->"Out[13]=",ExpressionUUID->"a6f7c682-d2d3-4d9e-8f93-0469c628288c"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8099478160359898`*^9, 
  3.8099478170288534`*^9}},ExpressionUUID->"73ecf712-37c9-4a6a-9197-\
4d4384124d41"],

Cell[CellGroupData[{

Cell["SSS & Causal Network Construction", "Title",
 CellChangeTimes->{{3.8098749095337105`*^9, 
  3.8098749448151927`*^9}},ExpressionUUID->"29aba276-0961-4c21-b7e3-\
f7b3f93af581"],

Cell[CellGroupData[{

Cell["Alphabet: fromAlpha, toAlpha, SSSConvert", "Subsection",
 CellChangeTimes->{{3.8098749968253345`*^9, 
  3.8098750097212057`*^9}},ExpressionUUID->"1288d822-875d-4c58-be43-\
f8e90e791f28"],

Cell[TextData[{
 "Build a causal network from a SSS, modeling the Sequential Substituion \
System using tags.  This allows us to build the SSS evolution and the causal \
network simultaneously.  \n(Based on code from ",
 StyleBox["NKS",
  FontSlant->"Italic"],
 ", pp. 1033, and suggestions of Matthew Szudzik.)"
}], "Text",
 CellChangeTimes->{{3.8098805740356636`*^9, 
  3.8098805998447704`*^9}},ExpressionUUID->"a6852a61-22bd-4f42-8556-\
cd21b6a7ab50"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fromAlpha", "[", "\"\<test\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8098806067335587`*^9, 3.8098806386551113`*^9}, {
  3.8098806805687857`*^9, 3.8098806905766983`*^9}, {3.8098807277307043`*^9, 
  3.809880728185807*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"58fd8070-48c1-4791-bee4-3b9e7521a24b"],

Cell[BoxData[
 RowBox[{"fromAlpha", "[", "\<\"test\"\>", "]"}]], "Output",
 CellChangeTimes->{
  3.8098806416325865`*^9, 3.8098806960719395`*^9, 3.809880756777234*^9, 
   3.809947647101571*^9, {3.809947730816925*^9, 3.809947756020651*^9}},
 CellLabel->"Out[8]=",ExpressionUUID->"8f97d457-d332-4dc4-a528-7c3bb18f2a61"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"toAlpha", "[", 
  RowBox[{"{", 
   RowBox[{"51", ",", " ", "36", ",", " ", "50", ",", " ", "51"}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{3.8098807400904675`*^9},
 CellLabel->"In[51]:=",ExpressionUUID->"3e2138f9-d1c7-4fc1-b736-6cf1425cc162"],

Cell[BoxData["\<\"test\"\>"], "Output",
 CellChangeTimes->{3.8098806416325865`*^9, 3.8098806960759315`*^9, 
  3.809880750679113*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"20584831-a3c8-4e80-a974-444c9d8e36c3"]
}, Open  ]],

Cell[TextData[{
 "If it is considered desirable to use a different alphabet, only the \
functions ",
 StyleBox["fromAlpha",
  FontSlant->"Italic"],
 " and ",
 StyleBox["toAlpha",
  FontSlant->"Italic"],
 " need be changed.  The only requirement is that the alphabet be enumerable, \
i.e., set in 1-1 correspondence with {0,1,2,\[Ellipsis]}."
}], "Text",
 CellChangeTimes->{
  3.809880929889165*^9},ExpressionUUID->"16bb6b74-9039-4bbe-9dce-\
6bb870837f85"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Character, string, ruleset weight & ruleset length", "Subsection",
 CellChangeTimes->{{3.809880769738632*^9, 
  3.8098807848831367`*^9}},ExpressionUUID->"028fb174-331a-475e-b495-\
3eb4a64b9203"],

Cell[TextData[{
 "For later iteration through the complete enumeration of rulesets, we \
require the ",
 StyleBox["weight",
  FontSlant->"Italic"],
 " of a character, a string or a ruleset.  The weight of a character is \
closely akin to what is already done by the ",
 StyleBox["fromAlpha",
  FontSlant->"Italic"],
 " function, but with A\[Rule]1, B\[Rule]2, etc., reserving 0 for the weight \
of the empty string.  The weight of a string is the sum of the weights of its \
characters, and the weight of a ruleset is sum of the weights of its strings:"
}], "Text",
 CellChangeTimes->{{3.809880792820097*^9, 3.809880824575884*^9}, {
   3.8098809784576244`*^9, 3.809881038539516*^9}, {3.809881086580579*^9, 
   3.8098811723997183`*^9}, 3.8098812126815042`*^9, {3.809881275250926*^9, 
   3.8098812759150753`*^9}},ExpressionUUID->"bb762622-47f9-40f2-b229-\
dada74bcc4d8"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["ToCharacterWeights[string]", "Item"]], "Item",
 CellChangeTimes->{{3.809881241682603*^9, 
  3.809881247382876*^9}},ExpressionUUID->"cb09f312-2d6d-471d-8fb9-\
b8e5491d1ec7"],

Cell[TextData[StyleBox["FromCharacterWeights[List of Integers]", "Item"]], \
"Item",
 CellChangeTimes->{{3.809881241682603*^9, 
  3.8098812533424997`*^9}},ExpressionUUID->"b6901fb0-b780-4c17-8a5f-\
7462998ebbc8"],

Cell[TextData[StyleBox["StringWeight[string]", "Item"]], "Item",
 CellChangeTimes->{{3.809881241682603*^9, 
  3.8098812580380926`*^9}},ExpressionUUID->"76f734f4-7f46-42b5-a09c-\
62eda8acb7a0"],

Cell[TextData[StyleBox["RuleSetWeight[List of Rulesets]", "Item"]], "Item",
 CellChangeTimes->{{3.809881241682603*^9, 
  3.8098812656947956`*^9}},ExpressionUUID->"548d6250-72c0-4d7f-aa83-\
d1086ac517e3"],

Cell[TextData[StyleBox["RuleSetLength[List of Rulesets]", "Item"]], "Item",
 CellChangeTimes->{{3.809881241682603*^9, 
  3.8098812719071846`*^9}},ExpressionUUID->"009c875e-e499-48ce-a51b-\
5e6bf094aeae"]
}, Open  ]],

Cell["\<\
Now StringWeight can be applied to either strings or characters \
(single-character strings)
RuleSetWeight and the comparably defined RuleSetLength give the sum of the \
weights or sum of the lengths, respectively, of the strings in the ruleset:\
\>", "Text",
 CellChangeTimes->{{3.8098812919318027`*^9, 
  3.809881307196216*^9}},ExpressionUUID->"71555934-fb0f-49e9-8577-\
c85abc89b80b"],

Cell[CellGroupData[{

Cell["\<\
SSSRuleIcon (Defines & uses $MaxColor, myColors, patternPrint)\
\>", "Subsubsection",
 CellChangeTimes->{{3.809881320244132*^9, 
  3.8098813351729555`*^9}},ExpressionUUID->"e4c1a072-bcfd-43ab-9e26-\
7fcaeaca86a5"],

Cell["\<\
TO DO: Define what SSRuleIcon is without using raw code
\
\>", "Text",
 CellChangeTimes->{{3.8098813638295183`*^9, 
  3.809881434136344*^9}},ExpressionUUID->"883ed83a-47a4-4a25-b85e-\
8c4d260625c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generating a ruleset for the tagged SSS: SSSNewRule", "Subsubsection",
 CellChangeTimes->{{3.809881453752657*^9, 
  3.8098814733930483`*^9}},ExpressionUUID->"f35a9b5b-12db-4802-ab90-\
4d720bac8460"],

Cell[TextData[{
 "We need a convenient way to convert old style rulesets (using letters only) \
to a new style ruleset, with the ability to handle tags.  For example, \
\[OpenCurlyDoubleQuote]BA\[CloseCurlyDoubleQuote]\[Rule]\
\[CloseCurlyDoubleQuote]ABA\[CloseCurlyDoubleQuote] or s[1,0]\[Rule]s[0,1,0] \
should be rewritten like so: \n\n",
 StyleBox["s[{1, a_}, {0, b_}] \[RuleDelayed] (AppendTo[$SSSConnectionList, \
{a, b} \[Rule] $SSSTagIndex + {0, 1, 2}];  s[{0, $SSSTagIndex++}, {1, \
$SSSTagIndex++}, {0, $SSSTagIndex++}])", "Code"]
}], "Text",
 CellChangeTimes->{{3.809881489139285*^9, 
  3.8098815025702915`*^9}},ExpressionUUID->"93d37e4c-39cc-42cf-8f62-\
8d7132df88e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Stripping out tags: SSSStrip", "Subsubsection",
 CellChangeTimes->{{3.809881526243105*^9, 
  3.8098815358672523`*^9}},ExpressionUUID->"3a2ae9f0-661d-4631-ae3f-\
73c4447a2210"],

Cell[TextData[{
 "Internally an SSS ",
 StyleBox["state",
  FontSlant->"Italic"],
 " will include not only information about the cells/letters, but in \
addition, unique identifiers or tags.  For visualization purposes a one-way \
conversion from tagged to untagged form will be needed.  Here\
\[CloseCurlyQuote]s a convert/strip function to strip out tags and recover \
the String notation:"
}], "Text",
 CellChangeTimes->{{3.80988154253274*^9, 
  3.8098815468757095`*^9}},ExpressionUUID->"9a74ab3c-d707-4506-92d1-\
b34743ee5121"],

Cell[BoxData[
 RowBox[{"SSStrip", "[", "state", "]"}]], "Input",
 CellChangeTimes->{{3.8098815820525804`*^9, 
  3.8098815891651735`*^9}},ExpressionUUID->"789af27f-a250-4851-8921-\
8843c52e4458"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Miscellaneous methods for dealing with strings & cells", "Subsubsection",
 CellChangeTimes->{{3.8098816052137656`*^9, 
  3.809881628838045*^9}},ExpressionUUID->"7c12ca05-d922-4553-9723-\
1662bc921bb6"],

Cell[CellGroupData[{

Cell["cellsDeleted[{L1_, L2_}]", "Item",
 CellChangeTimes->{{3.809881646454852*^9, 
  3.809881662554449*^9}},ExpressionUUID->"b9a65e6c-eda3-495f-b63c-\
7e813eb2c7b2"],

Cell["safeStringTake[s_String,{n1_Integer,n2_Integer}]", "Item",
 CellChangeTimes->{{3.809881646454852*^9, 
  3.809881675844644*^9}},ExpressionUUID->"8142f594-3d81-401e-9393-\
f7854920225a"],

Cell["abbrev[string, integer]", "Item",
 CellChangeTimes->{{3.809881646454852*^9, 3.8098816806740923`*^9}, {
  3.809881732673779*^9, 3.8098817390182*^9}, {3.809881779195174*^9, 
  3.809881794691947*^9}},ExpressionUUID->"b43b9ff0-d8f4-4db2-b53d-\
be366b79fead"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"abbrev", "[", 
  RowBox[{"\"\<ABCDEFGHI\>\"", ",", " ", "4"}], "]"}]], "Input",
 CellChangeTimes->{{3.8098818119087896`*^9, 3.809881847013511*^9}, 
   3.8098820099877586`*^9},
 CellLabel->"In[71]:=",ExpressionUUID->"8477caa5-506e-4761-a1ea-0ca9677e726d"],

Cell[TextData[StyleBox["{ ABCD, FGHI }", "Code"]], "Text",
 CellChangeTimes->{{3.8098821598805003`*^9, 
  3.80988217276831*^9}},ExpressionUUID->"386f4ddb-e55a-4c71-a6e6-\
1510bf8d756e"],

Cell["envelopeSubtractStrings[big_String, little_String]", "Item",
 CellChangeTimes->{{3.809882110069985*^9, 
  3.8098821204705105`*^9}},ExpressionUUID->"0254d4c6-4db3-4e70-ba4f-\
de4c49f7c6ba"]
}, Open  ]],

Cell[CellGroupData[{

Cell["SSSInitialize: Initializing Globals", "Subsubsection",
 CellChangeTimes->{{3.8098821870165033`*^9, 
  3.809882200408535*^9}},ExpressionUUID->"a75ff3a8-fae9-437f-8aa2-\
c4806c0e69d7"],

Cell["\<\
Creating a causal network from a tagged SSS system requires at least two \
global variables, $SSSConnectionList and $SSSTagIndex, so we might as well \
keep track of other useful things in global variables, to avoid unnecessary \
recomputations.  (Now adjusts $MaxColor up/down as needed.)

SSSInitialize now does first single-step, checks for death (removes need for \
SSSSingleStep verifying that SSSEvolution and SSSTEvolution have at least 2 \
elements, and that SSSConnectionList has at least 1 element.  Returns \
True|False and optionally prints a clarifying message.
\
\>", "Text",
 CellChangeTimes->{{3.8098822059698544`*^9, 
  3.809882210976959*^9}},ExpressionUUID->"c77cbe09-738b-4728-a750-\
88cfc79acb7a"],

Cell["\<\
SSSInitialize[ruleset,string,(mode)] attempts to perform the necessary \
initializion steps to generate sequential substitution system (SSS) \
evolutions and networks,
starting with a ruleset (e.g., {\[OpenCurlyDoubleQuote]BA\
\[CloseCurlyDoubleQuote]\[Rule]\[CloseCurlyDoubleQuote]ABA\
\[CloseCurlyDoubleQuote]}) and an initial state string (e.g., \
\[OpenCurlyDoubleQuote]BABA\[CloseCurlyDoubleQuote]).  The True|False return \
value indicates whether initialization was successful.

If omitted, mode defaults to \[OpenCurlyDoubleQuote]Silent\
\[CloseCurlyDoubleQuote], suppressing the short error or success message.

The following global variables are reset by this operation:

$SSSNet:\t\t\t\tthe causal network of the current SSS,
$SSSInDegree:\t\t\tthe list of in-degrees for each node,
$SSSOutDegreeActual:\t\tthe list of currently found out-degrees for each node,
$SSSOutDegreePotential:\t\tthe list of maximum possible out-degrees for each \
node,
$SSSOutDegreeRemaining:\tthe list of numbers of possible remaining \
out-connections for each node,
$SSSConnectionList:\t\tthe current list of all causal network connections,
$SSSDistance:\t\t\tthe list of minimum distances from the current node back \
to the starting node.
$SSSTagIndex:\t\t\tthe current tag index being used,
$SSSTEvolution:\t\t\tthe complete evolution of the tagged SSS so far,
$SSSEvolution:\t\t\tthe stripped (tagless) version of $SSSTEvolution,
$SSSRuleSet:\t\t\tthe ruleset used for creating the SSS,
$SSSTRuleSet:\t\t\tthe version of $SSSRuleSet (created by the function \
SSSNewRule) used to build $SSSTEvolution,
$SSSRuleSetWeight:\t\tthe total weight of $SSSRuleSet,
$SSSRuleSetLength:\t\tthe total length of $SSSRuleSet,
$SSSHistory:\t\t\tan annotated/translated version of $SSSEvolution used to \
detect repeating patterns,
$SSSMatchLengthHistory:\ta list of the match positions that occurred in \
forming the SSS,
$SSSRuleUsage:\t\t\tthe list of rule usage counters, later adjusted to \
identified portion of SSS,
$SSSRepetitionInterval:\t\tthe length of the repeating section (if any) of \
the SSS,
$SSSRepetitionStart:\t\tthe start of the repeating section (if any) of the SSS,
$SSSStart:\t\t\tthe starting position for displaying the SSS and its causal \
network,
$SSSVerdict:\t\t\tset to \[OpenCurlyDoubleQuote]Dead\[CloseCurlyDoubleQuote] \
| \[OpenCurlyDoubleQuote]Repeating\[CloseCurlyDoubleQuote] | \
\[OpenCurlyDoubleQuote]Pseudorepeating\[CloseCurlyDoubleQuote] as soon as the \
future of the SSS becomes clear.\
\>", "Abstract",
 CellChangeTimes->{
  3.809882300758894*^9},ExpressionUUID->"3e868e1c-f29e-42d2-b650-\
acfec338ffda"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 747.75},
WindowMargins->{{2394, Automatic}, {150.25, Automatic}},
FrontEndVersion->"12.1 for Microsoft Windows (64-bit) (March 18, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"84d621c4-7343-4c66-b2ea-63d6c6d4ae92"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d"->{
  Cell[158723, 3529, 11889, 292, 86, "Print",ExpressionUUID->"5419e441-7bb4-4063-8df6-b5391fb3a55d",
   CellTags->"Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d", 193208, 4411}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 578, 9, 47, "Input",ExpressionUUID->"0b32359b-b166-460c-89b9-1a958b7c8c65"],
Cell[1161, 33, 402, 5, 32, "Output",ExpressionUUID->"01e846a1-2fc9-4ca6-922d-70c3aa76bb84"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1600, 43, 193, 3, 28, "Input",ExpressionUUID->"e01a66db-3be5-4229-adf1-2f780fe823e4"],
Cell[1796, 48, 8349, 210, 91, "Output",ExpressionUUID->"c4a5f59c-40d4-497d-87df-b701acaa00e8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10182, 263, 182, 2, 28, "Input",ExpressionUUID->"3dfa2f96-4278-4dc9-905b-cb7d225e2a48"],
Cell[10367, 267, 2900, 49, 164, "Output",ExpressionUUID->"74537c3e-80ad-4a3a-b1aa-1bd4c2f280d3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13304, 321, 195, 3, 28, "Input",ExpressionUUID->"cffec599-af58-41e0-9572-087a717b0292"],
Cell[13502, 326, 13823, 318, 189, "Output",ExpressionUUID->"0c3a9177-349b-4ad8-82e5-013fded44212"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27362, 649, 91585, 1936, 1647, "WolframAlphaShortInput",ExpressionUUID->"5b816c7d-97ac-4390-a82b-08539a24b522"],
Cell[118950, 2587, 325, 7, 43, "Output",ExpressionUUID->"0a0ec30f-6fd6-4384-b011-6653218f2ba4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[119312, 2599, 194, 3, 28, "Input",ExpressionUUID->"35e626b6-b605-4888-8ab7-85887cd6b56c"],
Cell[119509, 2604, 39211, 923, 485, "Output",ExpressionUUID->"2ebe2b7d-9b2f-45b7-96e4-8fcb38ad5dfb"],
Cell[158723, 3529, 11889, 292, 86, "Print",ExpressionUUID->"5419e441-7bb4-4063-8df6-b5391fb3a55d",
 CellTags->"Info-fcf8b86e-251c-4c49-8e30-2479f51ab62d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[170649, 3826, 204, 3, 28, "Input",ExpressionUUID->"40ee29e2-4ea6-4ba8-93bf-518c207f619d"],
Cell[170856, 3831, 223, 3, 32, "Output",ExpressionUUID->"aea2444f-27c8-4072-b817-3b868416d0a2"]
}, Open  ]],
Cell[171094, 3837, 216, 3, 28, "Input",ExpressionUUID->"2d1bb351-764a-4e23-bbc2-c2a04d401e44"],
Cell[CellGroupData[{
Cell[171335, 3844, 192, 3, 28, "Input",ExpressionUUID->"1367764a-d29b-418d-9efb-d46a28771a24"],
Cell[171530, 3849, 8470, 212, 123, "Output",ExpressionUUID->"a6f7c682-d2d3-4d9e-8f93-0469c628288c"]
}, Open  ]],
Cell[180015, 4064, 156, 3, 28, "Input",ExpressionUUID->"73ecf712-37c9-4a6a-9197-4d4384124d41"],
Cell[CellGroupData[{
Cell[180196, 4071, 180, 3, 97, "Title",ExpressionUUID->"29aba276-0961-4c21-b7e3-f7b3f93af581"],
Cell[CellGroupData[{
Cell[180401, 4078, 192, 3, 55, "Subsection",ExpressionUUID->"1288d822-875d-4c58-be43-f8e90e791f28"],
Cell[180596, 4083, 454, 10, 56, "Text",ExpressionUUID->"a6852a61-22bd-4f42-8556-cd21b6a7ab50"],
Cell[CellGroupData[{
Cell[181075, 4097, 325, 5, 28, "Input",ExpressionUUID->"58fd8070-48c1-4791-bee4-3b9e7521a24b"],
Cell[181403, 4104, 317, 5, 32, "Output",ExpressionUUID->"8f97d457-d332-4dc4-a528-7c3bb18f2a61"]
}, Open  ]],
Cell[CellGroupData[{
Cell[181757, 4114, 272, 6, 28, "Input",ExpressionUUID->"3e2138f9-d1c7-4fc1-b736-6cf1425cc162"],
Cell[182032, 4122, 211, 3, 32, "Output",ExpressionUUID->"20584831-a3c8-4e80-a974-444c9d8e36c3"]
}, Open  ]],
Cell[182258, 4128, 455, 13, 56, "Text",ExpressionUUID->"16bb6b74-9039-4bbe-9dce-6bb870837f85"]
}, Open  ]],
Cell[CellGroupData[{
Cell[182750, 4146, 200, 3, 55, "Subsection",ExpressionUUID->"028fb174-331a-475e-b495-3eb4a64b9203"],
Cell[182953, 4151, 868, 17, 56, "Text",ExpressionUUID->"bb762622-47f9-40f2-b229-dada74bcc4d8"],
Cell[CellGroupData[{
Cell[183846, 4172, 196, 3, 31, "Item",ExpressionUUID->"cb09f312-2d6d-471d-8fb9-b8e5491d1ec7"],
Cell[184045, 4177, 212, 4, 31, "Item",ExpressionUUID->"b6901fb0-b780-4c17-8a5f-7462998ebbc8"],
Cell[184260, 4183, 192, 3, 31, "Item",ExpressionUUID->"76f734f4-7f46-42b5-a09c-62eda8acb7a0"],
Cell[184455, 4188, 203, 3, 31, "Item",ExpressionUUID->"548d6250-72c0-4d7f-aa83-d1086ac517e3"],
Cell[184661, 4193, 203, 3, 31, "Item",ExpressionUUID->"009c875e-e499-48ce-a51b-5e6bf094aeae"]
}, Open  ]],
Cell[184879, 4199, 397, 8, 56, "Text",ExpressionUUID->"71555934-fb0f-49e9-8577-c85abc89b80b"],
Cell[CellGroupData[{
Cell[185301, 4211, 223, 5, 45, "Subsubsection",ExpressionUUID->"e4c1a072-bcfd-43ab-9e26-7fcaeaca86a5"],
Cell[185527, 4218, 208, 6, 56, "Text",ExpressionUUID->"883ed83a-47a4-4a25-b85e-8c4d260625c5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[185772, 4229, 204, 3, 45, "Subsubsection",ExpressionUUID->"f35a9b5b-12db-4802-ab90-4d720bac8460"],
Cell[185979, 4234, 680, 12, 78, "Text",ExpressionUUID->"93d37e4c-39cc-42cf-8f62-8d7132df88e3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186696, 4251, 181, 3, 45, "Subsubsection",ExpressionUUID->"3a2ae9f0-661d-4631-ae3f-73c4447a2210"],
Cell[186880, 4256, 531, 12, 56, "Text",ExpressionUUID->"9a74ab3c-d707-4506-92d1-b34743ee5121"],
Cell[187414, 4270, 194, 4, 28, "Input",ExpressionUUID->"789af27f-a250-4851-8921-8843c52e4458"]
}, Open  ]],
Cell[CellGroupData[{
Cell[187645, 4279, 207, 3, 45, "Subsubsection",ExpressionUUID->"7c12ca05-d922-4553-9723-1662bc921bb6"],
Cell[CellGroupData[{
Cell[187877, 4286, 166, 3, 31, "Item",ExpressionUUID->"b9a65e6c-eda3-495f-b63c-7e813eb2c7b2"],
Cell[188046, 4291, 190, 3, 31, "Item",ExpressionUUID->"8142f594-3d81-401e-9393-f7854920225a"],
Cell[188239, 4296, 260, 4, 31, "Item",ExpressionUUID->"b43b9ff0-d8f4-4db2-b53d-be366b79fead"]
}, Open  ]],
Cell[188514, 4303, 278, 5, 28, "Input",ExpressionUUID->"8477caa5-506e-4761-a1ea-0ca9677e726d"],
Cell[188795, 4310, 185, 3, 34, "Text",ExpressionUUID->"386f4ddb-e55a-4c71-a6e6-1510bf8d756e"],
Cell[188983, 4315, 194, 3, 31, "Item",ExpressionUUID->"0254d4c6-4db3-4e70-ba4f-de4c49f7c6ba"]
}, Open  ]],
Cell[CellGroupData[{
Cell[189214, 4323, 188, 3, 45, "Subsubsection",ExpressionUUID->"a75ff3a8-fae9-437f-8aa2-c4806c0e69d7"],
Cell[189405, 4328, 727, 14, 144, "Text",ExpressionUUID->"c77cbe09-738b-4728-a750-88cfc79acb7a"],
Cell[190135, 4344, 2640, 51, 655, "Abstract",ExpressionUUID->"3e868e1c-f29e-42d2-b650-acfec338ffda"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

